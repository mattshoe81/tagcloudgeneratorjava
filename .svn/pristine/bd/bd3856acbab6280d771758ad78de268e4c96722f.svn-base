package tagcloudgenerator.controller;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.util.Iterator;

import components.map.Map;
import components.queue.Queue;
import components.set.Set;
import components.set.Set4;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.sortingmachine.SortingMachine;
import components.sortingmachine.SortingMachine1L;
import tagcloudgenerator.model.Model;

public class Controller {

    private Model model;
    /*
     * Set containing the separators. Used a set for its fast searching, since
     * that is all that will be done with it.
     */
    private Set<Character> separators;

    /**
     * Constructor for this, which passes a reference to the Model being used by
     * this.
     *
     * @param model
     */
    public Controller(Model model) {
        this.model = model;
        /*
         * Used a Set4 to take advantage of its hash table for searching
         */
        this.separators = new Set4<>();
        this.separators.add('\t');
        this.separators.add('\n');
        this.separators.add('\r');
        this.separators.add(',');
        this.separators.add('-');
        this.separators.add('.');
        this.separators.add('!');
        this.separators.add('?');
        this.separators.add('[');
        this.separators.add(']');
        this.separators.add('\'');
        this.separators.add(';');
        this.separators.add(':');
        this.separators.add('/');
        this.separators.add('(');
        this.separators.add(')');
        this.separators.add(' ');
    }

    public String getNextWordOrSeparator(String line, int start) {
        String word = "";
        int index = start;
        char currentChar = line.charAt(start);
        boolean beganAsSeparator = this.separators.contains(currentChar);
        while (index < line.length()
                && this.separators.contains(currentChar) == beganAsSeparator) {
            index++;
            if (index < line.length()) {
                currentChar = line.charAt(index);
            }
        }
        word = line.substring(start, index);

        return word;
    }

    public void parseText(SimpleReader in) {
        while (!in.atEOS()) {
            String line = in.nextLine();
            int index = 0;
            while (index < line.length()) {
                String word = this.getNextWordOrSeparator(line, index);
                index += word.length();
                if (!this.separators.contains(word.charAt(0))) {
                    this.model.addTagToMap(word);
                }
            }
        }
    }

    public void sortTags() {
        SortingMachine<String> sorter = new SortingMachine1L<>(
                new AlphabeticOrder());
        Iterator<Map.Pair<String, Integer>> iterator = this.model.getTagsMap()
                .iterator();
        while (iterator.hasNext()) {
            sorter.add(iterator.next().key());
        }
        sorter.changeToExtractionMode();
        while (sorter.size() > 0) {
            this.model.addSortedTag(sorter.removeFirst());
        }
    }

    public void printHeader(SimpleWriter out) {
        SimpleReader in = new SimpleReader1L("data/html-templates/header.html");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
    }

    public void printBody(SimpleWriter out) {
        Map<String, Integer> tagMap = this.model.getTagsMap();
        Queue<String> sortedTags = this.model.getSortedTags();
        while (sortedTags.length() > 0) {
            String tag = sortedTags.dequeue();
            Map.Pair<String, Integer> pair = tagMap.remove(tag);
            int fontSize = 10 + (pair.value() * 3);
            String output = "<span style=\"font-size:" + fontSize + "px\">"
                    + tag + " </span>";
            out.println(output);
        }
    }

    public void printFooter(SimpleWriter out) {
        SimpleReader in = new SimpleReader1L("data/html-templates/footer.html");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
    }

    public void printCSS() {
        SimpleWriter out = new SimpleWriter1L(
                this.model.getFolderLocation() + "/style.css");
        SimpleReader in = new SimpleReader1L("data/html-templates/style.css");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
        out.close();
    }

    /**
     * Updates the status message in the GUI.
     *
     * @param status
     *            message to display
     *
     * @requires [status is not null]
     */
    public void updateStatus(String status) {
        assert status != null : "Violation of: status is not null";
        this.model.setStatusLabel(status);
    }

    /**
     * Returns the file path given in the file path text field.
     *
     * @return the contents of the file path text field.
     */
    public String getFilePath() {
        return this.model.getFileLocation();
    }

    /**
     * Returns the folder path given in the folder text field.
     *
     * @return the contents of the folder text field.
     */
    public String getFolder() {
        return this.model.getFolderLocation();
    }

    /**
     * Returns a new GoButtonListener instance.
     *
     * @return new instance of a GoButtonListener
     */
    public GoButtonListener getGoButtonListener() {
        return new GoButtonListener(this.model);
    }

    /**
     * Returns a new ResetButtonListener instance.
     *
     * @return new instance of a ResetButtonListener
     */
    public ResetButtonListener getResetButtonListener() {
        return new ResetButtonListener();
    }

    /**
     * Sets the contents of both the file path and folder text fields to an
     * empty string.
     */
    public void resetTextFields() {
        this.model.setFileLocationField("");
        this.model.setFolderLocation("");
    }

    /*
     * ************************************************************************
     * ************************Button Listeners********************************
     * ************************************************************************
     */

    /**
     * This class gets the contents of the text fields and uses that information
     * to read the terms file and construct the proper web pages.
     *
     * @author matts
     *
     */
    public class GoButtonListener implements ActionListener {

        public GoButtonListener(Model model) {
            super();
            this.model = model;
        }

        Model model;

        @Override
        public final void actionPerformed(ActionEvent arg0) {

            this.model.setStatusLabel("Upload Failed");

            String inputFileName = this.model.getFileLocation();
            String outputFolderName = this.model.getFolderLocation();

            // Get an input stream for the txt file containing
            //SimpleReader inputFile = new SimpleReader1L(inputFileName);
            SimpleReader inputFile = new SimpleReader1L(inputFileName);

            /*
             * Parse the text file by adding each word and its number of
             * occurrences to a Map<String, Integer>
             */
            Controller.this.parseText(inputFile);
            /*
             * Sort the Queue<String> containing all of the tags in the text
             * file.
             */
            Controller.this.sortTags();

            /*
             * Get the output folder location and open an output stream
             */
            //String outputLocation = Controller.this.getFolder();
            String outputLocation = outputFolderName + "/tagcloud.html";
            SimpleWriter output = new SimpleWriter1L(outputLocation);
            /*
             * Print the Header, then the Body, then the Footer
             */
            Controller.this.printHeader(output);
            Controller.this.printBody(output);
            Controller.this.printFooter(output);
            Controller.this.printCSS();

            this.model.setStatusLabel("Upload Successful");

            // If possible, open the browser and display the Tag Cloud
            if (Desktop.isDesktopSupported()) {
                try {
                    File file = new File(outputLocation);
                    Desktop.getDesktop().open(file);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            inputFile.close();
        }
    }

    /**
     * This class resets the text fields to the empty string.
     *
     * @author matts
     *
     */
    public class ResetButtonListener implements ActionListener {

        @Override
        public final void actionPerformed(ActionEvent arg0) {
            Controller.this.resetTextFields();
            Controller.this.updateStatus("Ready");
            Controller.this.model.clearModel();
        }
    }

    public class AlphabeticOrder implements Comparator<String> {

        @Override
        public int compare(String arg0, String arg1) {
            String first = arg0.toLowerCase();
            String second = arg1.toLowerCase();

            return first.compareTo(second);
        }

    }
}
