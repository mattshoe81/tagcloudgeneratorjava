package tagcloudgenerator.controller;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.util.Iterator;

import components.map.Map;
import components.queue.Queue;
import components.set.Set;
import components.set.Set4;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.sortingmachine.SortingMachine;
import components.sortingmachine.SortingMachine1L;
import tagcloudgenerator.model.Model;

public class Controller {

    private Model model;
    /*
     * Set containing the separators. Used a set for its fast searching, since
     * that is all that will be done with it.
     */
    private Set<Character> separators;

    /**
     * Constructor for this, which passes a reference to the Model being used by
     * this.
     *
     * @param model
     */
    public Controller(Model model) {
        this.model = model;
        /*
         * Used a Set4 to take advantage of its hash table for searching
         */
        this.separators = new Set4<>();
        this.separators.add('\t');
        this.separators.add('\n');
        this.separators.add('\r');
        this.separators.add(',');
        this.separators.add('-');
        this.separators.add('.');
        this.separators.add('!');
        this.separators.add('?');
        this.separators.add('[');
        this.separators.add(']');
        this.separators.add('\'');
        this.separators.add(';');
        this.separators.add(':');
        this.separators.add('/');
        this.separators.add('(');
        this.separators.add(')');
        this.separators.add(' ');
        this.separators.add('"');
        this.separators.add('*');
    }

    /**************************************************************************
     * ******************** Project Logic *************************************
     * ************************************************************************
     * These are the methods and classes that essential to the logic of the
     * project requirements. Other methods and classes are unrelated to project
     * requirements.
     */

    /**
     * Returns a string containing all of the consecutive separators or the next
     * word after the index start.
     *
     * @param line
     *            the line containing the word or separators
     * @param start
     *            starting position at which to search for next word or
     *            separator
     * @return the next word or the next consecutive separators following the
     *         index position start in line
     * @ensures getNextWordOrSeparator = [the next word or the next consecutive
     *          separators following the index position start in line]
     */
    public String getNextWordOrSeparator(String line, int start) {
        String word = "";
        int index = start;
        char currentChar = line.charAt(start);
        boolean beganAsSeparator = this.separators.contains(currentChar);
        while (index < line.length()
                && this.separators.contains(currentChar) == beganAsSeparator) {
            index++;
            if (index < line.length()) {
                currentChar = line.charAt(index);
            }
        }
        word = line.substring(start, index);

        return word;
    }

    /**
     * Reads the text {@code in}, and adds each word of {@code in} to
     * this.model.tags.
     *
     * @param in
     *            input stream containing the text to be parsed
     * @clears in
     * @updates this.model.tags
     * @requires [in is open]
     * @ensures [every word of in is fed to this.model.tags]
     */
    public void parseText(SimpleReader in) {
        while (!in.atEOS()) {
            String line = in.nextLine();
            int index = 0;
            while (index < line.length()) {
                String word = this.getNextWordOrSeparator(line, index);
                index += word.length();
                if (!this.separators.contains(word.charAt(0))) {
                    this.model.addTagToMap(word);
                }
            }
        }
    }

    /**
     * Sorts the keys in this.model.tags by adding them to this.model.sortedTags
     * in alphabetically sorted order.
     *
     * @updates this.model.sortedTags
     * @ensures [the keys in this.model.tags are enqueued to
     *          this.model.sortedTags in alphabetically sorted order]
     */
    public void sortTags() {
        /*
         * Use the SortingMachine to sort the elements in the map, then add them
         * to model.sortedTags
         */
        SortingMachine<String> sorter = new SortingMachine1L<>(
                new AlphabeticOrder());
        /*
         * Using an iterator seemed a little more concise than a for each having
         * to deal with making a pair. This just adds each element in the tag
         * map into the sorter.
         */
        Iterator<Map.Pair<String, Integer>> iterator = this.model.getTagsMap()
                .iterator();
        while (iterator.hasNext()) {
            sorter.add(iterator.next().key());
        }

        /*
         * Take everything out of the sorter and add them to the queue of sorted
         * tags, obviously they come out of the sorter in sorted order, so this
         * works just fine.
         */
        sorter.changeToExtractionMode();
        while (sorter.size() > 0) {
            this.model.addSortedTag(sorter.removeFirst());
        }
    }

    /**
     * Prints the html markup for the the header (everything necessary for
     * well-formed markup before printing the words).
     *
     * @param out
     *            the output stream to print the html markup
     * @ensures [Well-formed html header markup is printed to out]
     */
    public void printHeader(SimpleWriter out) {
        /*
         * The header is saved in data/html-templates/header.html, which makes
         * it a little easier to read and make changes when necessary instead of
         * dealing with an ugly string. Just read each line in the header file
         * and print it to out.
         */
        SimpleReader in = new SimpleReader1L("data/html-templates/header.html");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
    }

    /**
     * Prints to {@code out} the html markup for every word in <@code
     * this.model.sortedTags}, such that the font size and the hex value of the
     * color of each word is scaled proportional to its frequency count
     * contained in {@code this.mmodel.tags}.
     *
     * @param out
     *            the output stream to print the html markup
     * @ensures [Well-formed html header markup is printed to out in which font
     *          size and the hex value of the color of each word is scaled
     *          proportional to its frequency count contained in
     *          {@code this.mmodel.tags}]
     */
    public void printBody(SimpleWriter out) {
        Map<String, Integer> tagMap = this.model.getTagsMap();
        Queue<String> sortedTags = this.model.getSortedTags();
        while (sortedTags.length() > 0) {
            /*
             * Take the sorted tag out of the queue and remove the corresponding
             * pair from the tag map
             */

            String tag = sortedTags.dequeue();
            Map.Pair<String, Integer> pair = tagMap.remove(tag);

            /*
             * Calculate the font size proportional to tag frequency. Multiplied
             * by 3 for more substantial size differences.
             */
            int maxFontSize = 500;
            int fontSize = 10 + (pair.value()) * 3;
            /*
             * The font size can get a little ridiculous, so cap it at 300
             */
            if (fontSize > maxFontSize) {
                fontSize = maxFontSize;
            }
            /*
             * The default color is black (#000000) for tags that appear once.
             * For anything else, increment the hex value proportional to the
             * frequency of the tag. Multiplied by 50,000 to increase color
             * distribution.
             */
            int color = 0x000000;
            // If the tag appears more than once, increment its hex color value
            if (pair.value() > 1) {
                color += pair.value() * 50000;
            }
            // Convert the hexadecimal to a properly formatted string
            String hexColor = String.format("#%06X", (0xFFFFFF & color));
            /*
             * Use a <span> element to set the properties of individual words
             * (namely the size and color) in the parent <p> element. (The
             * leading spaces are there to make the actual html a little more
             * readable.
             */
            String output = "               <span style=\"color:" + hexColor
                    + ";font-size:" + fontSize + "px;\">" + tag + " </span>";
            out.println(output);
        }
    }

    /**
     * Prints the html markup for the the footer (everything necessary for
     * well-formed markup after printing the words).
     *
     * @param out
     *            the output stream to print the html markup
     * @ensures [Well-formed html footer markup is printed to out]
     */
    public void printFooter(SimpleWriter out) {
        /*
         * The footer is saved in data/html-templates/footer.html, which makes
         * it a little easier to read and make changes when necessary instead of
         * dealing with an ugly string. Just read each line in the footer file
         * and print it to out.
         */
        SimpleReader in = new SimpleReader1L("data/html-templates/footer.html");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
    }

    /**
     * Prints the .css file containing the css styling for the tag html.
     *
     * @ensures [a file called style.css is printed to the same folder location
     *          as tagcloud.html]
     */
    public void printCSS() {
        /*
         * The css styling is saved in data/html-templates/sytle.css, which
         * makes it a little easier to read and make changes when necessary
         * instead of dealing with an ugly string. Just read each line the css
         * file and print it to the same folder that the tagcloud.html is
         * located in.
         */
        SimpleWriter out = new SimpleWriter1L(
                this.model.getFolderLocation() + "/style.css");
        SimpleReader in = new SimpleReader1L("data/html-templates/style.css");
        while (!in.atEOS()) {
            out.println(in.nextLine());
        }
        in.close();
        out.close();
    }

    /**
     * This is the listener for the button that the user clicks when they have
     * filled in the text fields. This class calls all of the methods necessary
     * to properly construct the tagcloud.html and style.css file.
     *
     */
    public class GoButtonListener implements ActionListener {

        public GoButtonListener(Model model) {
            super();
            this.model = model;
        }

        Model model;

        @Override
        public final void actionPerformed(ActionEvent arg0) {

            this.model.setStatusLabel("Upload Failed");

            String inputFileName = this.model.getFileLocation();
            String outputFolderName = this.model.getFolderLocation();

            // Get an input stream for the txt file containing
            //SimpleReader inputFile = new SimpleReader1L(inputFileName);
            SimpleReader inputFile = new SimpleReader1L(inputFileName);

            /*
             * Parse the text file by adding each word and its number of
             * occurrences to a Map<String, Integer>
             */
            Controller.this.parseText(inputFile);
            /*
             * Sort the Queue<String> containing all of the tags in the text
             * file.
             */
            Controller.this.sortTags();

            /*
             * Get the output folder location and open an output stream
             */
            //String outputLocation = Controller.this.getFolder();
            String outputLocation = outputFolderName + "/tagcloud.html";
            SimpleWriter output = new SimpleWriter1L(outputLocation);
            /*
             * Print the Header, then the Body, then the Footer
             */
            Controller.this.printHeader(output);
            Controller.this.printBody(output);
            Controller.this.printFooter(output);
            Controller.this.printCSS();

            this.model.setStatusLabel("Upload Successful");

            // If possible, open the browser and display the Tag Cloud
            if (Desktop.isDesktopSupported()) {
                try {
                    File file = new File(outputLocation);
                    Desktop.getDesktop().open(file);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            // Clear the model, in case consecutive Tag Clouds are generated
            this.model.clearModel();
            inputFile.close();
            output.close();
        }
    }

    /**
     * Comparator for comparing strings alphabetically, rather than
     * lexicographically.
     *
     */
    public class AlphabeticOrder implements Comparator<String> {

        @Override
        public int compare(String arg0, String arg1) {
            String first = arg0.toLowerCase();
            String second = arg1.toLowerCase();

            return first.compareTo(second);
        }

    }

    /***************************************************************************
     * ******************* End Project Logic *********************************
     * *************************************************************************
     */

    /***************************************************************************
     * ********************** Utility Methods **********************************
     * *************************************************************************
     * These methods and classes are there to facilitate the MVC design.
     */

    /**
     * Updates the status message in the GUI.
     *
     * @param status
     *            message to display
     *
     * @requires [status is not null]
     */
    public void updateStatus(String status) {
        assert status != null : "Violation of: status is not null";
        this.model.setStatusLabel(status);
    }

    /**
     * Returns the file path given in the file path text field.
     *
     * @return the contents of the file path text field.
     */
    public String getFilePath() {
        return this.model.getFileLocation();
    }

    /**
     * Returns the folder path given in the folder text field.
     *
     * @return the contents of the folder text field.
     */
    public String getFolder() {
        return this.model.getFolderLocation();
    }

    /**
     * Returns a new GoButtonListener instance.
     *
     * @return new instance of a GoButtonListener
     */
    public GoButtonListener getGoButtonListener() {
        return new GoButtonListener(this.model);
    }

    /**
     * Returns a new ResetButtonListener instance.
     *
     * @return new instance of a ResetButtonListener
     */
    public ResetButtonListener getResetButtonListener() {
        return new ResetButtonListener();
    }

    /**
     * Sets the contents of both the file path and folder text fields to an
     * empty string.
     */
    public void resetTextFields() {
        this.model.setFileLocationField("");
        this.model.setFolderLocation("");
    }

    /**
     * This class resets the text fields to the empty string.
     *
     * @author matts
     *
     */
    public class ResetButtonListener implements ActionListener {

        @Override
        public final void actionPerformed(ActionEvent arg0) {
            Controller.this.resetTextFields();
            Controller.this.updateStatus("Ready");
            Controller.this.model.clearModel();
        }
    }

}
